Aidan Kelly, Connor Montague, Liam Dowden, Tyler Puglia

Question 1
----------
As the stack grows, more and more calls of the fib function are made until the input n is less than 2 (i.e. the base case is reached)

Question 2
----------
As the stack shrinks, the values of the fib calls are returned to the outer calls of fib until the final (or first) call of fib resolves

Question 3
----------
This function is similar to the Fibonacci sequence function, except it computes the current term by also adding the 3rd previous term in addition to the 1st and 2nd previous term-

a_0 = 0
a_1 = 1
a_2 = 2
a_3 = a_0 + a_1 + a_2 = 0 + 1 + 2 = 3
a_4 = a_1 + a_2 + a_3 = 1 + 2 + 3 = 6
a_5 = a_2 + a_3 + a_4 = 2 + 3 + 6 = 11
a_6 = a_3 + a_4 + a_5 = 3 + 6 + 11 = 20

Question 4
----------
Main call: n = 5
   ------> Recursive Call 1: n = 4
            -------> Recursive Call 2: n = 3
                   -------> Recursive Call 3: n = 2

Question 5
----------
Main call: n = 12345
    -----> Recursive Call 1: n = 1234
        -----> Recursive Call 2: n = 123
            -----> Recursive Call 3: n = 12
                -----> Recursive Call 4: n = 1

Question 6
----------
Main call: str = "tacocat"
    -----> Recursive Call 1: str = "acoca"
        -----> Recursive Call 2: str = "coc" 

Question 7
----------
Main call: arr = [1, 2, 3, 4, 5, 6, 2], n = 7
    Recursive call 1: arr = [2, 3, 4, 5, 6, 2], n = 6
        Recursive call 2: arr = [3, 4, 5, 6, 2], n = 5
            Recursive call 3: arr = [4, 5, 6, 2], n = 4
